/*---------------------------------------------------Задание №1--------------------------------------------------*/
/*  1. На основе таблиц ниже, составьте запрос, где стоимость заказов больше 1000 и меньше 3000
    2. На основе таблиц ниже, составьте запрос за весенние месяцы 2016 года
    3. Покажите Пользователей у кого нет заказов
 */   

create database if not exists shop;
use shop;

CREATE TABLE customers
( customer_id int NOT NULL,
  last_name char(50) NOT NULL,
  first_name char(50) NOT NULL,
  favorite_website char(50),
  CONSTRAINT customers_pk PRIMARY KEY (customer_id)
);

CREATE TABLE orders
( order_id int NOT NULL,
  customer_id int,
  order_date date,
  order_cost int, -- Добавлена стоимость заказа
  CONSTRAINT orders_pk PRIMARY KEY (order_id),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id) -- добавлен FOREIGN KEY
);

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(4000, 'Jackson', 'Joe', 'techonthenet.com');

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(5000, 'Smith', 'Jane', 'digminecraft.com');

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(6000, 'Ferguson', 'Samantha', 'bigactivities.com');

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(7000, 'Reynolds', 'Allen', 'checkyourmath.com');

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(8000, 'Anderson', 'Paige', NULL);

INSERT INTO customers
(customer_id, last_name, first_name, favorite_website)
VALUES
(9000, 'Johnson', 'Derek', 'techonthenet.com');

INSERT INTO orders
(order_id, customer_id, order_date, order_cost)
VALUES
(1,7000,'2016/04/18', 1000);

INSERT INTO orders
(order_id, customer_id, order_date, order_cost)
VALUES
(2,5000,'2016/04/18', 2000);

INSERT INTO orders
(order_id, customer_id, order_date, order_cost)
VALUES
(3,8000,'2016/04/19', 3000);

INSERT INTO orders
(order_id, customer_id, order_date, order_cost)
VALUES
(4,4000,'2016/04/20', 4000);

INSERT INTO orders
(order_id, customer_id, order_date, order_cost)
VALUES
(5,null,'2016/05/01', 5000);

-- составьте запрос, где стоимость заказов больше 1000 и меньше 3000
select * from orders
where order_cost > 1000 and order_cost < 3000;

-- составьте запрос за весенние месяцы 2016 года
select * from orders
where month(order_date) >= 3 and month(order_date) <= 6
and year(order_date) = 2016;

-- Покажите Пользователей у кого нет заказов
select last_name, first_name from customers
where customers.customer_id
not in 
	(select customers.customer_id from customers, orders
	where orders.customer_id = customers.customer_id);
/*--------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------Задание №2-------------------------------------------------*/
/*---------------Спроектировать  бд “семья” по схеме и создать запросы------------------------------------------*/

create database if not exists family;
use family;

CREATE TABLE if not exists familymembers(
  member_id INT NOT NULL PRIMARY KEY,
  status VARCHAR(45) NOT NULL,
  member_name VARCHAR(45) NOT NULL,
  birthday datetime
); 

CREATE TABLE if not exists goodtypes(
  good_type_id INT NOT NULL PRIMARY KEY,
  good_type_name VARCHAR(45) NOT NULL
); 

CREATE TABLE if not exists goods(
  good_id INT NOT NULL PRIMARY KEY,
  good_name VARCHAR(45) NOT NULL,
  type int not null,
  foreign key (type) references goodtypes(good_type_id)
); 

CREATE TABLE if not exists payments(
  payment_id INT NOT NULL PRIMARY KEY,
  family_member int NOT NULL,
  good int NOT NULL,
  amount int not null,
  unit_price int not null,
  date datetime,
  foreign key (family_member) references familymembers(member_id),
  foreign key (good) references goods(good_id)
); 

insert into familymembers values
(1, 'mother', 'Anna Ivanova', '1985-01-01'),
(2, 'father', 'Ivan Ivanov', '1983-05-05'),
(3, 'son', 'Pavel Ivanov', '2000-11-11'),
(4, 'daughter', 'Polina Ivanova', '2002-07-07');

insert into goodtypes values
(1, 'vegetable'),
(2, 'fruit'),
(3, 'milk'),
(4, 'bakery');

insert into goods values
(1, 'potato', 1),
(2, 'tomato', 1),
(3, 'cucumber', 1),
(4, 'apple', 2),
(5, 'pear', 2),
(6, 'butter', 3),
(7, 'bread', 4);

insert into payments values
(1, 1, 1, 3, 200, '2023-11-10'),
(2, 1, 2, 4, 300, '2023-11-10'),
(3, 1, 4, 3, 400, '2023-11-10'),
(4, 1, 5, 3, 200, '2023-11-10'),
(5, 2, 6, 1, 100, '2023-11-08'),
(6, 2, 3, 2, 50, '2023-11-08'),
(7, 3, 3, 5, 250, '2023-11-01');

-- 1.1. Найти имена всех матерей (mother)
select member_name from familymembers
where status = 'mother';

-- 1.2. Определить, кто из членов семьи покупал картошку (potato)
select * from familymembers, goods, payments
where payments.family_member = familymembers.member_id
and payments.good = goods.good_id
and good_name = 'potato';

-- 1.3. Определить какие товары не были куплены
select good_name from goods
where good_id not in
	(select good from payments where payments.good = goods.good_id);
/*--------------------------------------------------------------------------------------------------------------*/
